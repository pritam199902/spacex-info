{"version":3,"sources":["component/MissionKey.js","component/Launchs.js","component/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["MissionKey","className","GET_LAUNCHS","gql","Launchs","useQuery","loading","error","data","refetch","color","onClick","launchs","map","dt","i","launch_success","mission_name","launch_date_local","to","flight_number","GET_LAUNCH","styles","txt","fontSize","Launch","useRouteMatch","params","variables","parseInt","launch","rocket","rocket_id","rocket_name","rocket_type","style","processData","client","ApolloClient","uri","cache","InMemoryCache","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2c81e97.chunk.js","sourcesContent":["import React from 'react'\n\nfunction MissionKey() {\n    return (\n        <div className=\"row m-0 mb-2\">\n            <div className=\"col-lg-7 col-md-8 col-sm-10 m-auto\">\n\n                <span className=\"bg-success px-3 mr-2\"></span> mission success <br />\n                <span className=\"bg-danger px-3 mr-2\"></span> mission fail\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default MissionKey\n","import React from 'react';\nimport MissionKey from \"./MissionKey\"\nimport { gql, useQuery } from '@apollo/client'\nimport { SyncLoader } from \"react-spinners\"\nimport { Link } from \"react-router-dom\"\n\n// import Moment from \"react-moment\";\n\nconst GET_LAUNCHS = gql`\n  query GetLaunchs {\n    launchs{\n        flight_number\n        mission_name\n        launch_year\n        launch_date_local\n        launch_success\n      }\n  }\n`;\n\n\n\nconst Launchs = () => {\n\n    const { loading, error, data, refetch } = useQuery(GET_LAUNCHS)\n\n    return (\n        <div>\n            <h5 className=\"text-center\">Launchs</h5>\n\n\n            {/* {console.log(data)} */}\n            {\n                loading &&\n                <div className=\"row m-0 mt-5\">\n                    <div className=\"col m-auto text-center\">\n                        <SyncLoader className=\"text-center m-0 \" color={\"#faf\"} />\n                    </div>\n                </div>\n            }\n            {\n                error &&\n                <div className=\"row m-0\">\n                    <div className=\"col-lg-7 col-md-8 col-sm-10 m-auto text-center mt-2\">\n                        <h6 className=\"text-warning\"> Error while loading data!\n                            <button className=\"btn btn-danger py-1 ml-3\" onClick={() => { refetch() }}>Reload</button>\n                        </h6>\n                    </div>\n                </div>\n            }\n\n            {\n                data &&\n                <MissionKey />\n            }\n            {\n                data &&\n                (data.launchs.map((dt, i) => {\n                    return (\n                        <div key={i} className=\"row m-0 mt-2\">\n                            <div className=\"col-lg-7 col-md-8 col-sm-10 m-auto\">\n                                <div className=\"card\">\n                                    <div className=\"card-body px-4 py-2\">\n                                        <div>\n                                            <h5>Mission : <span className={dt.launch_success ? \"text-success\" : \"text-danger\"} > {dt.mission_name} </span></h5>\n                                            <p className=\"mb-0\" >Date : {dt.launch_date_local}\n                                                <Link to={`/launch/${dt.flight_number}`} className=\"btn btn-secondary float-right py-0 m-auto\" >info</Link>\n                                            </p>\n\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }))\n\n            }\n        </div >\n    )\n}\n\n\nexport default Launchs","import React, { Fragment } from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport { SyncLoader } from \"react-spinners\"\nimport { Link, useRouteMatch } from \"react-router-dom\"\n\nconst GET_LAUNCH = gql`\n    query GetLaunch ($flight_number : Int!){\n        launch(flight_number: $flight_number){\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n            rocket{\n              rocket_id\n              rocket_name\n              rocket_type\n            }\n        }\n    }\n`;\n\nfunction Launch() {\n    const { params } = useRouteMatch()\n    const { flight_number } = params\n\n    const { loading, error, data, refetch } = useQuery(GET_LAUNCH, { variables: { flight_number: parseInt(flight_number) } })\n\n    const processData = () => {\n        if (loading) {\n            return (\n                <div className=\"row m-0 mt-5\">\n                    <div className=\"col m-auto text-center\">\n                        <SyncLoader className=\"text-center m-0 \" color={\"#faf\"} />\n                    </div>\n                </div>\n            )\n        } else if (error) {\n            return (\n                <div className=\"row m-0\">\n                    <div className=\"col-lg-7 col-md-8 col-sm-10 m-auto text-center mt-2\">\n                        <h6 className=\"text-warning\"> Error while loading data!\n                            <button className=\"btn btn-danger py-1 ml-3\" onClick={() => { refetch() }}>Reload</button>\n                        </h6>\n                    </div>\n                </div>)\n        }\n        else if (data) {\n            // console.log(data);\n\n            const { mission_name, launch_date_local, launch_success, rocket } = data.launch\n            const { rocket_id, rocket_name, rocket_type } = rocket\n\n\n            return (\n                <Fragment>\n\n                    <div className=\"row m-0 my-3\">\n                        <div className=\"col-lg-7 col-md-8 col-sm-10 m-auto\">\n                            <h5>Launch Details</h5>\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    {/* <div> */}\n\n                                    <h5 className={\"text-secondary\"}>Mission : <span className={launch_success ? \"text-success\" : \"text-danger\"} > {mission_name} </span></h5>\n                                    <h5 style={styles.txt} className={\"text-secondary mt-4\"}>Date : <span className={\"text-info\"} > {launch_date_local} </span></h5>\n\n                                    <h5 style={styles.txt} className={\"text-secondary\"}>Status : <span className={launch_success ? \"text-success\" : \"text-danger px-3 \"} > {launch_success ? \"Success\" : \"Fail\"} </span></h5>\n\n                                    {/* </div> */}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"row m-0 my-3\">\n                        <div className=\"col-lg-7 col-md-8 col-sm-10 m-auto mt-\">\n                            <h5>Rocket Details</h5>\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    {/* <div> */}\n\n                                    <h5 style={styles.txt} className={\"text-secondary\"}>Rocket ID : <span className={\"text-info\"} > {rocket_id} </span></h5>\n                                    <h5 style={styles.txt} className={\"text-secondary\"}>Rocket Name : <span className={\"text-info\"} > {rocket_name} </span></h5>\n                                    <h5 style={styles.txt} className={\"text-secondary\"}>Rocket Type : <span className={\"text-info\"} > {rocket_type} </span></h5>\n\n                                    {/* </div> */}\n                                </div>\n                            </div>\n\n                            <Link to=\"/\" className=\"btn btn-secondary mt-3\">back</Link>\n\n                        </div>\n                    </div >\n                </Fragment>\n            )\n        }\n    }\n\n    return (\n        <div>\n            <h5 className=\"text-center\">Launch Information</h5>\n\n            {/* <h4 className=\"text-center\"> Launch details </h4> */}\n            {\n                processData()\n            }\n        </div>\n    )\n}\n\n\nconst styles = {\n    txt: {\n        fontSize: \"20px\"\n    }\n}\n\n\nexport default Launch\n","import './App.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\"\nimport { BrowserRouter, Route } from \"react-router-dom\"\n// import \nimport Launchs from \"./component/Launchs\"\nimport Launch from \"./component/Launch\"\n\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n  cache: new InMemoryCache()\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client} >\n      <BrowserRouter >\n        <div className=\"row m-0\">\n          <div className=\"col\">\n            <h2 className=\"text-center\">SpaceX</h2>\n          </div>\n        </div>\n\n        <Route exact path=\"/\" >\n          <Launchs />\n        </Route>\n\n        <Route exact path=\"/launch/:flight_number\" >\n          <Launch />\n        </Route>\n\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}